/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import DAO.MonHocDAO;
import DAO.SinhVienDAO;
import DAO.SinhVienMonHocDAO;
import DTO.MonHocDTO;
import DTO.SinhVienDTO;
import DTO.SinhVienMonHocDTO;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class NhapDiemGUI extends javax.swing.JPanel {

    private MonHocDAO monHocDAO; // DAO for managing subjects
    private List<MonHocDTO> courses; // List to hold loaded courses
    private SinhVienMonHocDAO sinhVienMonHocDAO;
    private SinhVienDAO sinhVienDAO;

    /**
     * Creates new form NhapDiemGUI
     */
    public NhapDiemGUI() {
        initComponents();
        monHocDAO = new MonHocDAO(); // Create DAO instance
        sinhVienMonHocDAO = new SinhVienMonHocDAO();
        sinhVienDAO = new SinhVienDAO();
        loadCoursesToComboBox(); // Load subjects into JComboBox
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        cboMonHoc = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnDuyet = new javax.swing.JButton();
        btnCapNhatDiem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();

        jLabel2.setText("Môn học:");

        cboMonHoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboMonHoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMonHocActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnDuyet.setText("Duyệt");
        btnDuyet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDuyetActionPerformed(evt);
            }
        });

        btnCapNhatDiem.setText("Cập nhật điểm");
        btnCapNhatDiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapNhatDiemActionPerformed(evt);
            }
        });

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cboMonHoc, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(btnDuyet, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(btnCapNhatDiem, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cboMonHoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDuyet)
                    .addComponent(btnCapNhatDiem)
                    .addComponent(btnXoa))
                .addContainerGap(99, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
   private void loadCoursesToComboBox() {
        courses = monHocDAO.listCourses(); // Get list of subjects
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        for (MonHocDTO course : courses) {
            model.addElement(course.getMaMonHoc() + " - " + course.getTenMonHoc()); // Assuming getTenMonHoc() gives the subject name
        }

        cboMonHoc.setModel(model); // Set model for JComboBox

        if (courses.size() > 0) {
            updateStudentTable(courses.get(0).getMaMonHoc());
        }
    }
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            MonHocDTO selectedCourse = courses.get(selectedRow);
            cboMonHoc.setSelectedItem(selectedCourse.getTenMonHoc()); // Set selected course in the JComboBox
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnDuyetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDuyetActionPerformed
        int selectedIndex = cboMonHoc.getSelectedIndex();

        if (selectedIndex != -1) {
            String selectedItem = (String) cboMonHoc.getSelectedItem();
            String maMonHoc = selectedItem.split(" - ")[0];
            String tenMonHoc = selectedItem.split(" - ")[1];
            int selectedRow = jTable1.getSelectedRow();

            if (selectedRow != -1) {
                String maSinhVien = jTable1.getValueAt(selectedRow, 0).toString().trim();

                if (!maSinhVien.isEmpty()) {
                    SinhVienMonHocDAO sinhVienMonHocDAO = new SinhVienMonHocDAO();

                    try {
                        List<SinhVienMonHocDTO> registeredCourses = sinhVienMonHocDAO.getRegisteredCourses(maSinhVien);
                        boolean isRegistered = false;

                        for (SinhVienMonHocDTO registration : registeredCourses) {
                            if (registration.getMaMonHoc().equals(maMonHoc)) {
                                sinhVienMonHocDAO.approveRegistration(maSinhVien, maMonHoc);
                                isRegistered = true;
                                JOptionPane.showMessageDialog(this, "Duyệt thành công: " + tenMonHoc);
                                updateStudentTable(maMonHoc);
                                break;
                            }
                        }

                        if (!isRegistered) {
                            JOptionPane.showMessageDialog(this, "Sinh viên chưa đăng ký môn học này.");
                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Lỗi trong quá trình duyệt: " + e.getMessage());
                        e.printStackTrace();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Mã sinh viên không hợp lệ.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn một sinh viên.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một môn học.");
        }
    }//GEN-LAST:event_btnDuyetActionPerformed

    private void btnCapNhatDiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapNhatDiemActionPerformed
// Hàm xử lý cập nhật điểm
        int selectedRow = jTable1.getSelectedRow(); // Lấy hàng đã chọn từ JTable
        if (selectedRow != -1) { // Nếu có hàng được chọn
            String maMonHoc = jTable1.getValueAt(selectedRow, 2).toString(); // Mã môn học
            String maSinhVien = jTable1.getValueAt(selectedRow, 0).toString(); // Mã sinh viên

            // Lấy điểm từ ô hiện tại (có thể là điểm quá trình hoặc điểm kết thúc)
            String currentScore = jTable1.getValueAt(selectedRow, 4).toString(); // Điểm quá trình
            String newScore = JOptionPane.showInputDialog(this, "Nhập điểm mới cho " + maSinhVien + " trong môn " + maMonHoc + ": (điểm hiện tại: " + currentScore + ")");

            // Kiểm tra xem người dùng đã nhập điểm không
            if (newScore != null && !newScore.trim().isEmpty()) {
                // Chuyển đổi điểm nhập vào thành Double
                Double diemQuaTrinh = Double.parseDouble(newScore); // Cập nhật điểm quá trình

                // Lấy điểm kết thúc từ ô tương ứng (có thể lấy từ cột khác hoặc yêu cầu nhập)
                String currentFinalScore = jTable1.getValueAt(selectedRow, 5).toString(); // Điểm kết thúc (có thể từ cột khác)
                String newFinalScore = JOptionPane.showInputDialog(this, "Nhập điểm kết thúc cho " + maSinhVien + " trong môn " + maMonHoc + ": (điểm hiện tại: " + currentFinalScore + ")");

                if (newFinalScore != null && !newFinalScore.trim().isEmpty()) {
                    // Chuyển đổi điểm kết thúc nhập vào thành Double
                    Double diemKetThuc = Double.parseDouble(newFinalScore); // Cập nhật điểm kết thúc

                    // Gọi phương thức cập nhật trong DAO
                    sinhVienMonHocDAO.updateScores(maSinhVien, maMonHoc, diemQuaTrinh, diemKetThuc);

                    // Cập nhật bảng
                    updateStudentTable(maMonHoc); // Cập nhật lại bảng sinh viên

                    JOptionPane.showMessageDialog(this, "Điểm đã được cập nhật cho: " + maSinhVien + " trong môn " + maMonHoc);
                } else {
                    JOptionPane.showMessageDialog(this, "Điểm kết thúc không được nhập.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Điểm không được nhập.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một sinh viên từ bảng.");
        }

    }//GEN-LAST:event_btnCapNhatDiemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        int selectedIndex = cboMonHoc.getSelectedIndex();
        int selectedRow = jTable1.getSelectedRow();

        if (selectedIndex != -1 && selectedRow != -1) {
            MonHocDTO selectedCourse = courses.get(selectedIndex);
            String maSinhVien = jTable1.getValueAt(selectedRow, 0).toString().trim();

            int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa đăng ký môn học " + selectedCourse.getTenMonHoc() + " cho sinh viên " + maSinhVien + " không?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                SinhVienMonHocDAO sinhVienMonHocDAO = new SinhVienMonHocDAO();
                try {
                    boolean success = sinhVienMonHocDAO.deleteSinhVienMonHoc(maSinhVien, selectedCourse.getMaMonHoc());
                    if (success) {
                        loadCoursesToComboBox(); // Reload courses after deletion
                        JOptionPane.showMessageDialog(this, "Đã xóa đăng ký môn học: " + selectedCourse.getTenMonHoc() + " cho sinh viên " + maSinhVien);
                    } else {
                        JOptionPane.showMessageDialog(this, "Không tìm thấy đăng ký để xóa.");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Lỗi trong quá trình xóa: " + e.getMessage());
                    e.printStackTrace();
                }
            }
        } else {
            if (selectedIndex == -1) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn một môn học.");
            }
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn một sinh viên.");
            }
        }
    }//GEN-LAST:event_btnXoaActionPerformed
    private void updateStudentTable(String maMonHoc) {
        // Định nghĩa tên các cột
        String[] columnNames = new String[]{
            "Mã Sinh Viên", // Student ID
            "Tên Sinh Viên", // Student Name
            "Mã Môn Học", // Course ID
            "Tên Môn Học", // Course Name
            "Điểm Quá Trình", // Continuous Assessment Score
            "Điểm Kết Thúc", // Final Score
            "Trạng Thái Đăng Ký" // Registration Status
        };

        // Khởi tạo DefaultTableModel với tên cột
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);

        // Xóa các dòng cũ nếu có (nếu sử dụng model trước đó)
        tableModel.setRowCount(0); // Clear existing rows

        // Lấy danh sách đăng ký của môn học chỉ định
        List<SinhVienMonHocDTO> registrations = sinhVienMonHocDAO.getStudentsByCourse(maMonHoc);

        // Điền dữ liệu vào model
        for (SinhVienMonHocDTO registration : registrations) {
            // Lấy thông tin sinh viên bằng DAO
            SinhVienDTO student = sinhVienDAO.getSinhVienById(registration.getMaSinhVien());

            if (student != null) { // Nếu tồn tại sinh viên
                String courseName = monHocDAO.getMonHocById(registration.getMaMonHoc()).getTenMonHoc(); // Lấy tên môn học

                Object[] rowData = new Object[]{
                    student.getMaSinhVien(), // Mã sinh viên
                    student.getTenSinhVien(), // Tên sinh viên
                    registration.getMaMonHoc(), // Mã môn học
                    courseName, // Tên môn học
                    registration.getDiemQuaTrinh() != null ? registration.getDiemQuaTrinh() : "Chưa có", // Điểm quá trình
                    registration.getDiemKetThuc() != null ? registration.getDiemKetThuc() : "Chưa có", // Điểm kết thúc
                    registration.isDangKyDuocDuyet() ? "Đã duyệt" : "Chưa duyệt" // Trạng thái đăng ký
                };
                tableModel.addRow(rowData); // Thêm dòng mới vào bảng
            }
        }

        // Thiết lập model cho jTable1
        jTable1.setModel(tableModel);
    }


    private void cboMonHocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMonHocActionPerformed
        // TODO add your handling code here:
        // Get the selected item from the JComboBox
        String selectedItem = (String) cboMonHoc.getSelectedItem();

        if (selectedItem != null) {
            // Extract the course ID from the selected item
            String maMonHoc = selectedItem.split(" - ")[0]; // Assuming format "ID - Name"

            // Get the list of students registered for the selected course
            // Update the JTable or any other UI component to display the students
            updateStudentTable(maMonHoc); // Implement this method to update your UI
        }
    }//GEN-LAST:event_cboMonHocActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCapNhatDiem;
    private javax.swing.JButton btnDuyet;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cboMonHoc;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
