/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import DAO.MonHocDAO;
import DAO.SinhVienDAO;
import DAO.SinhVienMonHocDAO;
import DTO.MonHocDTO;
import DTO.SinhVienMonHocDTO;
import Utils.Session;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.List;
import javax.swing.table.DefaultTableModel;

public class DangKyGUI extends javax.swing.JPanel {

    /**
     * Creates new form DangKyGUI
     */
    public DangKyGUI() {
        initComponents();
        loadCourses();
        loadRegisteredCourses();
      
    }

    private void loadCourses() {
        // Assuming you have a way to get the currently logged-in student's ID
        String maSinhVien = Session.currentStudentId;

        // Get unregistered courses
        SinhVienMonHocDAO sinhVienMonHocDAO = new SinhVienMonHocDAO();
        List<MonHocDTO> unregisteredCourses = sinhVienMonHocDAO.getUnregisteredCourses(maSinhVien);

        // Clear existing items in cboMonHoc
        cboMonHoc.removeAllItems();

        // Populate the JComboBox with unregistered courses
        for (MonHocDTO course : unregisteredCourses) {
            cboMonHoc.addItem(course.getMaMonHoc() + " - " + course.getTenMonHoc());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLamMoi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnDangKy = new javax.swing.JButton();
        btnHuyDangKy = new javax.swing.JButton();
        cboMonHoc = new javax.swing.JComboBox<>();

        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Môn học:");

        btnDangKy.setText("Đăng ký");
        btnDangKy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDangKyActionPerformed(evt);
            }
        });

        btnHuyDangKy.setText("Hủy đăng ký");
        btnHuyDangKy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyDangKyActionPerformed(evt);
            }
        });

        cboMonHoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2)
                        .addGap(26, 26, 26)
                        .addComponent(cboMonHoc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(176, 176, 176)
                                .addComponent(btnDangKy)
                                .addGap(94, 94, 94)
                                .addComponent(btnHuyDangKy)
                                .addGap(70, 70, 70)
                                .addComponent(btnLamMoi))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cboMonHoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDangKy)
                    .addComponent(btnHuyDangKy)
                    .addComponent(btnLamMoi))
                .addContainerGap(122, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
        String selectedItem = (String) cboMonHoc.getSelectedItem();
        if (selectedItem != null) {
            String maMonHoc = selectedItem.split(" - ")[0]; // Get the course code

            // Assuming you have a way to get the currently logged-in student's ID
            String maSinhVien = Session.currentStudentId;

            // Create a new SinhVienMonHoc object
            SinhVienMonHocDTO newRegistration = new SinhVienMonHocDTO(maSinhVien, maMonHoc); // Initial score is 0

            // Add the registration to the DAO
            SinhVienMonHocDAO sinhVienMonHocDAO = new SinhVienMonHocDAO();
            sinhVienMonHocDAO.addSinhVienMonHoc(newRegistration);

            // Optionally, refresh the course list or display a confirmation message
            loadCourses();
        }

    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int selectedRow = jTable1.getSelectedRow();
        btnHuyDangKy.setEnabled(selectedRow >= 0);
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnDangKyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDangKyActionPerformed
        String selectedItem = (String) cboMonHoc.getSelectedItem();
        if (selectedItem != null) {
            String maMonHoc = selectedItem.split(" - ")[0]; // Get the course code

            // Assuming you have a way to get the currently logged-in student's ID
            String maSinhVien = Session.currentStudentId;

            // Create a new SinhVienMonHoc object
            SinhVienMonHocDTO newRegistration = new SinhVienMonHocDTO(maSinhVien, maMonHoc); // Initial score is 0

            // Add the registration to the DAO
            SinhVienMonHocDAO sinhVienMonHocDAO = new SinhVienMonHocDAO();
            sinhVienMonHocDAO.addSinhVienMonHoc(newRegistration);

            // Optionally, refresh the course list or display a confirmation message
            loadCourses();
            loadRegisteredCourses();
        }
    }//GEN-LAST:event_btnDangKyActionPerformed

    private void btnHuyDangKyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyDangKyActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            // Get selected course information from the table
            String maSinhVien = Session.currentStudentId; // Get current student's ID
            String maMonHoc = (String) jTable1.getValueAt(selectedRow, 2); // Assuming the course code is in the second column

            // Call the DAO to remove the registration
            SinhVienMonHocDAO sinhVienMonHocDAO = new SinhVienMonHocDAO();
            sinhVienMonHocDAO.deleteSinhVienMonHoc(maSinhVien, maMonHoc);

            // Optionally, refresh the table
            loadCourses();
            loadRegisteredCourses();
        }
    }//GEN-LAST:event_btnHuyDangKyActionPerformed
    private void loadRegisteredCourses() {
        // Load the registered courses for the current student into jTable1
        String maSinhVien = Session.currentStudentId; // Get current student's ID
        SinhVienMonHocDAO sinhVienMonHocDAO = new SinhVienMonHocDAO();
        SinhVienDAO sinhVienDAO = new SinhVienDAO(); // DAO to fetch student names
        MonHocDAO monHocDAO = new MonHocDAO(); // DAO to fetch course names

        // Fetch registered courses for the current student
        List<SinhVienMonHocDTO> registeredCourses = sinhVienMonHocDAO.getRegisteredCourses(maSinhVien);

        // Define column names
        String[] columnNames = {
            "Mã Sinh Viên", // Student ID
            "Tên Sinh Viên", // Student Name
            "Mã Môn Học", // Course ID
            "Tên Môn Học", // Course Name
            "Điểm Quá Trình", // Continuous Assessment Score
            "Điểm Kết Thúc", // Final Score
            "Trạng Thái" // Registration Status
        };

        // Create a DefaultTableModel
        DefaultTableModel model = new DefaultTableModel(columnNames, 0); // 0 rows initially

        // Populate the model with data
        for (SinhVienMonHocDTO course : registeredCourses) {
            String studentName = sinhVienDAO.getSinhVienById(course.getMaSinhVien()).getTenSinhVien(); // Fetch student name
            String courseName = monHocDAO.getMonHocById(course.getMaMonHoc()).getTenMonHoc(); // Fetch course name

            Object[] rowData = new Object[]{
                course.getMaSinhVien(), // Student ID
                studentName, // Student Name
                course.getMaMonHoc(), // Course ID
                courseName, // Course Name
                course.getDiemQuaTrinh() != null ? course.getDiemQuaTrinh() : "Chưa có", // Continuous Assessment Score
                course.getDiemKetThuc(), // Final Score
                course.isDangKyDuocDuyet() ? "Đã duyệt" : "Chưa duyệt" // Registration Status
            };
            model.addRow(rowData);
        }

        // Set the model to jTable1
        jTable1.setModel(model);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDangKy;
    private javax.swing.JButton btnHuyDangKy;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JComboBox<String> cboMonHoc;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
